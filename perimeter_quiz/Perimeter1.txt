import edu.duke.*;

public class PerimeterRunner {
    public double getPerimeter (Shape s) {
        // Start with totalPerim = 0
        double totalPerim = 0.0;
        // Start wth prevPt = the last point 
        Point prevPt = s.getLastPoint();
        // For each point currPt in the shape,
        for (Point currPt : s.getPoints()) {
            // Find distance from prevPt point to currPt 
            double currDist = prevPt.distance(currPt);
            // Update totalPerim by currDist
            totalPerim = totalPerim + currDist;
            // Update prevPt to be currPt
            prevPt = currPt;
        }
        // totalPerim is the answer
        return totalPerim;
    }
	public int getNumPoints( Shape s){
	  double totalPerim = 0.0;
	  int numPoint = 0;
	  Point prevPt = s.getLastPoint();
	  for (Point currPt : s.getPoints()) {
	   numPoint = numPoint + 1;
	   double currDist = prevPt.distance(currPt);
	   totalPerim = totalPerim + currDist;
	   prevPt = currPt;	
	  }
	return numPoint;
	}

	public double getAverageLength (Shape s) {
        // Start with totalPerim = 0
        double totalPerim = 0.0;
	int nbrOfPoint = 0;
        // Start wth prevPt = the last point 
        Point prevPt = s.getLastPoint(); //getting the two points on graph
        // For each point currPt in the shape,
        for (Point currPt : s.getPoints()) { //current point in the graph
		nbrOfPoint = nbrOfPoint + 1;
            // Find distance from prevPt point to currPt 
            double currDist = prevPt.distance(currPt);  
            // Update totalPerim by currDist
            totalPerim = totalPerim + currDist;
            // Update prevPt to be currPt
            prevPt = currPt;
        }
        
        // totalPerim is the answer
	totalPerim = totalPerim / nbrOfPoint;
        return totalPerim;
    }

    public void testPerimeter () {
        FileResource fr = new FileResource();
        Shape s = new Shape(fr);
        double length = getPerimeter(s);
        System.out.println("perimeter = " + length);import edu.duke.*;

public class PerimeterRunner {
    public double getPerimeter (Shape s) {
        // Start with totalPerim = 0
        double totalPerim = 0.0;
        // Start wth prevPt = the last point 
        Point prevPt = s.getLastPoint();
        // For each point currPt in the shape,
        for (Point currPt : s.getPoints()) {
            // Find distance from prevPt point to currPt 
            double currDist = prevPt.distance(currPt);
            // Update totalPerim by currDist
            totalPerim = totalPerim + currDist;
            // Update prevPt to be currPt
            prevPt = currPt;
        }
        // totalPerim is the answer
        return totalPerim;
    }
	public int getNumPoints( Shape s){
	  double totalPerim = 0.0;
	  int numPoint = 0;
	  Point prevPt = s.getLastPoint();
	  for (Point currPt : s.getPoints()) {
	   numPoint = numPoint + 1;
	   double currDist = prevPt.distance(currPt);
	   totalPerim = totalPerim + currDist;
	   prevPt = currPt;	
	  }
	return numPoint;
	}

	public double getAverageLength (Shape s) {
        // Start with totalPerim = 0
        double totalPerim = 0.0;
	int nbrOfPoint = 0;
        // Start wth prevPt = the last point 
        Point prevPt = s.getLastPoint(); //getting the two points on graph
        // For each point currPt in the shape,
        for (Point currPt : s.getPoints()) { //current point in the graph
		nbrOfPoint = nbrOfPoint + 1;
            // Find distance from prevPt point to currPt 
            double currDist = prevPt.distance(currPt);  
            // Update totalPerim by currDist
            totalPerim = totalPerim + currDist;
            // Update prevPt to be currPt
            prevPt = currPt;
        }
        
        // totalPerim is the answer
	totalPerim = totalPerim / nbrOfPoint;
        return totalPerim;
    }

    public void testPerimeter () {
        FileResource fr = new FileResource();
        Shape s = new Shape(fr);
        double length = getPerimeter(s);
        System.out.println("perimeter = " + length);
	int numPoints = getNumPoints(s);
	System.out.println("Number of Points = " + numPoints);
	double average = getAverageLength(s);
        System.out.println("Average Side Length is = " + average);
    }

    public static void main (String[] args) {
        PerimeterRunner pr = new PerimeterRunner();
        pr.testPerimeter();
    }
}

	int numPoints = getNumPoints(s);
	System.out.println("Number of Points = " + numPoints);
	double average = getAverageLength(s);
        System.out.println("Average Side Length is = " + average);
    }

    public static void main (String[] args) {
        PerimeterRunner pr = new PerimeterRunner();
        pr.testPerimeter();
    }
}
